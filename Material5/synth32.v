`include "mycells.v"
/* Generated by Yosys 0.7 (git sha1 61f6811, gcc 4.8.4-2ubuntu1~14.04.3 -O2 -fstack-protector -fPIC -Os) */

(* src = "mux.v:1" *)
module mux(sel, din_0, din_1, muxOut);
  wire _0_;
  wire _1_;
  wire _2_;
  (* src = "mux.v:2" *)
  input din_0;
  (* src = "mux.v:2" *)
  input din_1;
  (* src = "mux.v:3" *)
  output muxOut;
  (* src = "mux.v:2" *)
  input sel;
  NAND _3_ (
    .A(sel),
    .B(din_1),
    .Y(_0_)
  );
  NOT _4_ (
    .A(sel),
    .Y(_1_)
  );
  NAND _5_ (
    .A(_1_),
    .B(din_0),
    .Y(_2_)
  );
  NAND _6_ (
    .A(_2_),
    .B(_0_),
    .Y(muxOut)
  );
endmodule

(* src = "muxflop.v:1" *)
module muxflop(sel, din_0, din_1, muxOut, clk);
  (* src = "muxflop.v:5" *)
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  (* src = "muxflop.v:2" *)
  input clk;
  (* src = "muxflop.v:2" *)
  input din_0;
  (* src = "muxflop.v:2" *)
  input din_1;
  (* src = "muxflop.v:3" *)
  output muxOut;
  (* src = "muxflop.v:2" *)
  input sel;
  NAND _4_ (
    .A(sel),
    .B(din_1),
    .Y(_1_)
  );
  NOT _5_ (
    .A(sel),
    .Y(_2_)
  );
  NAND _6_ (
    .A(_2_),
    .B(din_0),
    .Y(_3_)
  );
  NAND _7_ (
    .A(_3_),
    .B(_1_),
    .Y(_0_)
  );
  DFF _8_ (
    .C(clk),
    .D(_0_),
    .Q(muxOut)
  );
endmodule

(* src = "register4B.v:1" *)
module reg_desp(q, s_out, clk, enb, dir, s_in, mode, d);
  (* src = "register4B.v:7" *)
  wire [3:0] _000_;
  (* src = "register4B.v:7" *)
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  (* src = "register4B.v:2" *)
  input clk;
  (* src = "register4B.v:4" *)
  input [3:0] d;
  (* src = "register4B.v:2" *)
  input dir;
  (* src = "register4B.v:2" *)
  input enb;
  (* src = "register4B.v:3" *)
  input [1:0] mode;
  (* src = "register4B.v:5" *)
  output [3:0] q;
  (* src = "register4B.v:2" *)
  input s_in;
  (* src = "register4B.v:6" *)
  output s_out;
  NOT _067_ (
    .A(enb),
    .Y(_002_)
  );
  NOT _068_ (
    .A(mode[0]),
    .Y(_003_)
  );
  NOT _069_ (
    .A(mode[1]),
    .Y(_004_)
  );
  NOR _070_ (
    .A(_004_),
    .B(_003_),
    .Y(_005_)
  );
  NOR _071_ (
    .A(_005_),
    .B(_002_),
    .Y(_006_)
  );
  NOT _072_ (
    .A(_006_),
    .Y(_007_)
  );
  NAND _073_ (
    .A(_007_),
    .B(s_out),
    .Y(_008_)
  );
  NOT _074_ (
    .A(dir),
    .Y(_009_)
  );
  NAND _075_ (
    .A(_009_),
    .B(q[3]),
    .Y(_010_)
  );
  NAND _076_ (
    .A(dir),
    .B(q[0]),
    .Y(_011_)
  );
  NAND _077_ (
    .A(_011_),
    .B(_010_),
    .Y(_012_)
  );
  NOR _078_ (
    .A(mode[1]),
    .B(mode[0]),
    .Y(_013_)
  );
  NOT _079_ (
    .A(_013_),
    .Y(_014_)
  );
  NOR _080_ (
    .A(_014_),
    .B(_002_),
    .Y(_015_)
  );
  NAND _081_ (
    .A(_015_),
    .B(_012_),
    .Y(_016_)
  );
  NAND _082_ (
    .A(_016_),
    .B(_008_),
    .Y(_001_)
  );
  NAND _083_ (
    .A(_002_),
    .B(q[0]),
    .Y(_017_)
  );
  NOR _084_ (
    .A(mode[1]),
    .B(_003_),
    .Y(_018_)
  );
  NAND _085_ (
    .A(q[1]),
    .B(dir),
    .Y(_019_)
  );
  NAND _086_ (
    .A(_019_),
    .B(_010_),
    .Y(_020_)
  );
  NAND _087_ (
    .A(_020_),
    .B(_018_),
    .Y(_021_)
  );
  NOT _088_ (
    .A(d[0]),
    .Y(_022_)
  );
  NOR _089_ (
    .A(_004_),
    .B(mode[0]),
    .Y(_023_)
  );
  NAND _090_ (
    .A(_023_),
    .B(_022_),
    .Y(_024_)
  );
  NAND _091_ (
    .A(q[0]),
    .B(mode[1]),
    .Y(_025_)
  );
  NAND _092_ (
    .A(_025_),
    .B(mode[0]),
    .Y(_026_)
  );
  NAND _093_ (
    .A(_026_),
    .B(_024_),
    .Y(_027_)
  );
  NAND _094_ (
    .A(_027_),
    .B(_021_),
    .Y(_028_)
  );
  NOT _095_ (
    .A(s_in),
    .Y(_029_)
  );
  NOR _096_ (
    .A(_029_),
    .B(dir),
    .Y(_030_)
  );
  NAND _097_ (
    .A(_019_),
    .B(_013_),
    .Y(_031_)
  );
  NOR _098_ (
    .A(_031_),
    .B(_030_),
    .Y(_032_)
  );
  NOR _099_ (
    .A(_032_),
    .B(_002_),
    .Y(_033_)
  );
  NAND _100_ (
    .A(_033_),
    .B(_028_),
    .Y(_034_)
  );
  NAND _101_ (
    .A(_034_),
    .B(_017_),
    .Y(_000_[0])
  );
  NOR _102_ (
    .A(_006_),
    .B(q[1]),
    .Y(_035_)
  );
  NAND _103_ (
    .A(mode[1]),
    .B(_003_),
    .Y(_036_)
  );
  NOR _104_ (
    .A(_036_),
    .B(d[1]),
    .Y(_037_)
  );
  NAND _105_ (
    .A(q[2]),
    .B(dir),
    .Y(_038_)
  );
  NAND _106_ (
    .A(_009_),
    .B(q[0]),
    .Y(_039_)
  );
  NAND _107_ (
    .A(_039_),
    .B(_038_),
    .Y(_040_)
  );
  NOR _108_ (
    .A(_040_),
    .B(mode[1]),
    .Y(_041_)
  );
  NOR _109_ (
    .A(_041_),
    .B(_037_),
    .Y(_042_)
  );
  NOR _110_ (
    .A(_042_),
    .B(_002_),
    .Y(_043_)
  );
  NOR _111_ (
    .A(_043_),
    .B(_035_),
    .Y(_000_[1])
  );
  NOR _112_ (
    .A(_006_),
    .B(q[2]),
    .Y(_044_)
  );
  NOR _113_ (
    .A(_036_),
    .B(d[2]),
    .Y(_045_)
  );
  NAND _114_ (
    .A(dir),
    .B(q[3]),
    .Y(_046_)
  );
  NAND _115_ (
    .A(q[1]),
    .B(_009_),
    .Y(_047_)
  );
  NAND _116_ (
    .A(_047_),
    .B(_046_),
    .Y(_048_)
  );
  NOR _117_ (
    .A(_048_),
    .B(mode[1]),
    .Y(_049_)
  );
  NOR _118_ (
    .A(_049_),
    .B(_045_),
    .Y(_050_)
  );
  NOR _119_ (
    .A(_050_),
    .B(_002_),
    .Y(_051_)
  );
  NOR _120_ (
    .A(_051_),
    .B(_044_),
    .Y(_000_[2])
  );
  NAND _121_ (
    .A(_002_),
    .B(q[3]),
    .Y(_052_)
  );
  NAND _122_ (
    .A(q[2]),
    .B(_009_),
    .Y(_053_)
  );
  NAND _123_ (
    .A(_053_),
    .B(_011_),
    .Y(_054_)
  );
  NAND _124_ (
    .A(_054_),
    .B(_018_),
    .Y(_055_)
  );
  NOT _125_ (
    .A(d[3]),
    .Y(_056_)
  );
  NAND _126_ (
    .A(_023_),
    .B(_056_),
    .Y(_057_)
  );
  NAND _127_ (
    .A(q[3]),
    .B(mode[1]),
    .Y(_058_)
  );
  NAND _128_ (
    .A(_058_),
    .B(mode[0]),
    .Y(_059_)
  );
  NAND _129_ (
    .A(_059_),
    .B(_057_),
    .Y(_060_)
  );
  NAND _130_ (
    .A(_060_),
    .B(_055_),
    .Y(_061_)
  );
  NOR _131_ (
    .A(_029_),
    .B(_009_),
    .Y(_062_)
  );
  NAND _132_ (
    .A(_053_),
    .B(_013_),
    .Y(_063_)
  );
  NOR _133_ (
    .A(_063_),
    .B(_062_),
    .Y(_064_)
  );
  NOR _134_ (
    .A(_064_),
    .B(_002_),
    .Y(_065_)
  );
  NAND _135_ (
    .A(_065_),
    .B(_061_),
    .Y(_066_)
  );
  NAND _136_ (
    .A(_066_),
    .B(_052_),
    .Y(_000_[3])
  );
  DFF _137_ (
    .C(clk),
    .D(_000_[0]),
    .Q(q[0])
  );
  DFF _138_ (
    .C(clk),
    .D(_000_[1]),
    .Q(q[1])
  );
  DFF _139_ (
    .C(clk),
    .D(_000_[2]),
    .Q(q[2])
  );
  DFF _140_ (
    .C(clk),
    .D(_000_[3]),
    .Q(q[3])
  );
  DFF _141_ (
    .C(clk),
    .D(_001_),
    .Q(s_out)
  );
endmodule

(* top =  1  *)
(* src = "register32B.v:5" *)
module register_32(Q, s_out, clk, enb, dir, s_in, mode, D);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "register32B.v:11" *)
  input [31:0] D;
  (* src = "register32B.v:6" *)
  output [31:0] Q;
  (* src = "register32B.v:8" *)
  input clk;
  (* src = "register32B.v:8" *)
  input dir;
  (* src = "register32B.v:8" *)
  input enb;
  (* src = "register32B.v:10" *)
  input [1:0] mode;
  (* src = "register32B.v:14" *)
  wire [1:0] modeF;
  (* src = "register32B.v:68" *)
  wire s0;
  (* src = "register32B.v:9" *)
  input s_in;
  (* src = "register32B.v:15" *)
  wire s_in1;
  (* src = "register32B.v:15" *)
  wire s_in2;
  (* src = "register32B.v:15" *)
  wire s_in3;
  (* src = "register32B.v:15" *)
  wire s_in4;
  (* src = "register32B.v:15" *)
  wire s_in5;
  (* src = "register32B.v:15" *)
  wire s_in6;
  (* src = "register32B.v:15" *)
  wire s_in7;
  (* src = "register32B.v:15" *)
  wire s_in8;
  (* src = "register32B.v:13" *)
  wire s_inF;
  (* src = "register32B.v:7" *)
  output s_out;
  (* src = "register32B.v:16" *)
  wire s_out1;
  (* src = "register32B.v:16" *)
  (* unused_bits = "0" *)
  wire s_out2;
  (* src = "register32B.v:16" *)
  (* unused_bits = "0" *)
  wire s_out3;
  (* src = "register32B.v:16" *)
  (* unused_bits = "0" *)
  wire s_out4;
  (* src = "register32B.v:16" *)
  (* unused_bits = "0" *)
  wire s_out5;
  (* src = "register32B.v:16" *)
  (* unused_bits = "0" *)
  wire s_out6;
  (* src = "register32B.v:16" *)
  (* unused_bits = "0" *)
  wire s_out7;
  (* src = "register32B.v:16" *)
  (* unused_bits = "0" *)
  wire s_out8;
  (* src = "register32B.v:18" *)
  wire sel;
  NOT _10_ (
    .A(mode[1]),
    .Y(_00_)
  );
  NOT _11_ (
    .A(mode[0]),
    .Y(_01_)
  );
  NOR _12_ (
    .A(_01_),
    .B(_00_),
    .Y(modeF[0])
  );
  NOR _13_ (
    .A(_01_),
    .B(mode[1]),
    .Y(_02_)
  );
  NOR _14_ (
    .A(mode[0]),
    .B(_00_),
    .Y(_03_)
  );
  NOR _15_ (
    .A(_03_),
    .B(_02_),
    .Y(sel)
  );
  NOR _16_ (
    .A(_02_),
    .B(s_in),
    .Y(_04_)
  );
  NOT _17_ (
    .A(Q[31]),
    .Y(_05_)
  );
  NOR _18_ (
    .A(dir),
    .B(_05_),
    .Y(_06_)
  );
  NAND _19_ (
    .A(dir),
    .B(Q[0]),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_07_),
    .B(_02_),
    .Y(_08_)
  );
  NOR _21_ (
    .A(_08_),
    .B(_06_),
    .Y(_09_)
  );
  NOR _22_ (
    .A(_09_),
    .B(_04_),
    .Y(s_inF)
  );
  (* src = "register32B.v:60" *)
  mux m1 (
    .din_0(s_inF),
    .din_1(Q[4]),
    .muxOut(s_in1),
    .sel(dir)
  );
  (* src = "register32B.v:61" *)
  mux m2 (
    .din_0(Q[3]),
    .din_1(Q[8]),
    .muxOut(s_in2),
    .sel(dir)
  );
  (* src = "register32B.v:62" *)
  mux m3 (
    .din_0(Q[7]),
    .din_1(Q[12]),
    .muxOut(s_in3),
    .sel(dir)
  );
  (* src = "register32B.v:63" *)
  mux m4 (
    .din_0(Q[11]),
    .din_1(Q[16]),
    .muxOut(s_in4),
    .sel(dir)
  );
  (* src = "register32B.v:64" *)
  mux m5 (
    .din_0(Q[15]),
    .din_1(Q[20]),
    .muxOut(s_in5),
    .sel(dir)
  );
  (* src = "register32B.v:65" *)
  mux m6 (
    .din_0(Q[19]),
    .din_1(Q[24]),
    .muxOut(s_in6),
    .sel(dir)
  );
  (* src = "register32B.v:66" *)
  mux m7 (
    .din_0(Q[23]),
    .din_1(Q[28]),
    .muxOut(s_in7),
    .sel(dir)
  );
  (* src = "register32B.v:67" *)
  mux m8 (
    .din_0(Q[27]),
    .din_1(s_inF),
    .muxOut(s_in8),
    .sel(dir)
  );
  (* src = "register32B.v:68" *)
  mux m9 (
    .din_0(Q[31]),
    .din_1(s_out1),
    .muxOut(s0),
    .sel(dir)
  );
  (* src = "register32B.v:69" *)
  muxflop mF (
    .clk(clk),
    .din_0(32'd0),
    .din_1(s0),
    .muxOut(s_out),
    .sel(sel)
  );
  (* src = "register32B.v:51" *)
  reg_desp reg1 (
    .clk(clk),
    .d(D[3:0]),
    .dir(dir),
    .enb(enb),
    .mode({ mode[1], modeF[0] }),
    .q(Q[3:0]),
    .s_in(s_in1),
    .s_out(s_out1)
  );
  (* src = "register32B.v:52" *)
  reg_desp reg2 (
    .clk(clk),
    .d(D[7:4]),
    .dir(dir),
    .enb(enb),
    .mode({ mode[1], modeF[0] }),
    .q(Q[7:4]),
    .s_in(s_in2),
    .s_out(s_out2)
  );
  (* src = "register32B.v:53" *)
  reg_desp reg3 (
    .clk(clk),
    .d(D[11:8]),
    .dir(dir),
    .enb(enb),
    .mode({ mode[1], modeF[0] }),
    .q(Q[11:8]),
    .s_in(s_in3),
    .s_out(s_out3)
  );
  (* src = "register32B.v:54" *)
  reg_desp reg4 (
    .clk(clk),
    .d(D[15:12]),
    .dir(dir),
    .enb(enb),
    .mode({ mode[1], modeF[0] }),
    .q(Q[15:12]),
    .s_in(s_in4),
    .s_out(s_out4)
  );
  (* src = "register32B.v:55" *)
  reg_desp reg5 (
    .clk(clk),
    .d(D[19:16]),
    .dir(dir),
    .enb(enb),
    .mode({ mode[1], modeF[0] }),
    .q(Q[19:16]),
    .s_in(s_in5),
    .s_out(s_out5)
  );
  (* src = "register32B.v:56" *)
  reg_desp reg6 (
    .clk(clk),
    .d(D[23:20]),
    .dir(dir),
    .enb(enb),
    .mode({ mode[1], modeF[0] }),
    .q(Q[23:20]),
    .s_in(s_in6),
    .s_out(s_out6)
  );
  (* src = "register32B.v:57" *)
  reg_desp reg7 (
    .clk(clk),
    .d(D[27:24]),
    .dir(dir),
    .enb(enb),
    .mode({ mode[1], modeF[0] }),
    .q(Q[27:24]),
    .s_in(s_in7),
    .s_out(s_out7)
  );
  (* src = "register32B.v:58" *)
  reg_desp reg8 (
    .clk(clk),
    .d(D[31:28]),
    .dir(dir),
    .enb(enb),
    .mode({ mode[1], modeF[0] }),
    .q(Q[31:28]),
    .s_in(s_in8),
    .s_out(s_out8)
  );
  assign modeF[1] = mode[1];
endmodule
